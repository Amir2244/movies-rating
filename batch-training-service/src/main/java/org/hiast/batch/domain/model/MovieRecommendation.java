package org.hiast.batch.domain.model;

import java.io.Serializable;
import java.time.Instant;
import java.util.List;
import java.util.Objects;

/**
 * Represents a movie recommendation for a user.
 * This is used to store the recommendations generated by the ALS model.
 */
public class MovieRecommendation implements Serializable {
    private static final long serialVersionUID = 1L;

    private final int userId;
    private final int movieId;
    private final float rating;
    private final Instant generatedAt;
    private final MovieMetaData metaData = null;

    /**
     * Constructor for MovieRecommendation without movie metadata.
     *
     * @param userId      The user ID.
     * @param movieId     The movie ID.
     * @param rating      The predicted rating.
     * @param generatedAt The timestamp when the recommendation was generated.
     */
    public MovieRecommendation(int userId, int movieId, float rating, Instant generatedAt) {
        this(userId, movieId, rating, generatedAt, null);
    }

    /**
     * Constructor for MovieRecommendation with movie metadata.
     *
     * @param userId      The user ID.
     * @param movieId     The movie ID.
     * @param rating      The predicted rating.
     * @param generatedAt The timestamp when the recommendation was generated.
     */
    public MovieRecommendation(int userId, int movieId, float rating, Instant generatedAt,
                               MovieMetaData metaData) {
        this.userId = userId;
        this.movieId = movieId;
        this.rating = rating;
        this.generatedAt = Objects.requireNonNull(generatedAt, "generatedAt cannot be null");
    }

    public int getUserId() {
        return userId;
    }

    public int getMovieId() {
        return movieId;
    }

    public float getRating() {
        return rating;
    }

    public Instant getGeneratedAt() {
        return generatedAt;
    }

    public String getMovieTitle() {
        return metaData.getTitle();
    }

    public List<String> getMovieGenres() {
        return metaData.getGenres();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MovieRecommendation that = (MovieRecommendation) o;
        return userId == that.userId &&
                movieId == that.movieId &&
                Float.compare(that.rating, rating) == 0 &&
                Objects.equals(generatedAt, that.generatedAt) &&
                Objects.equals(metaData, that.metaData);

    }

    @Override
    public int hashCode() {
        return Objects.hash(userId, movieId, rating, generatedAt, metaData);
    }

    @Override
    public String toString() {
        return "MovieRecommendation{" +
                "userId=" + userId +
                ", movieId=" + movieId +
                ", rating=" + rating +
                ", generatedAt=" + generatedAt +
                ", movieTitle='" + metaData.getTitle() + '\'' +
                ", movieGenres=" + metaData.getGenres() +
                '}';
    }
}
